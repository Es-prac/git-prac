-----紐づいているアカウントの確認！！！！-----
1:「.git」ディレクトリは初期化「git init」することで作成され、初期化されたリポジトリ内のファイルの変更を追跡・管理できるようになる
2:「git status」で変更ファイルの確認やインデックス(ステージング)の確認
3:「git diff」でステージングと作業ディレクトリとの差分確認
4: リポジトリ内に新しいテキストファイルを作成し、ステージング「git add ファイル名」→コミット(1行メッセ付き)「git commit -m "message"」
5: テキストファイルをさらに変更、最終コミットと作業ディレクトリとの差分確認「git diff」
6：「git add .」で新規ファイル・変更ファイルを全てステージング→コミット
7：「git commit」で複数行コメント付きのコミット
8： コミットコマンド実行→自動で「vim」が起動→「i」or「I：カーソル位置問わない」でインサートモードへ
9： インサートモードで1行目に要約→2行目空行(enter)→3行目に詳細(issueなどとの紐づけ)を記述
10： コメント編集完了→「esc」→「：」「w：コメントファイルの保存」「q：vimの終了」→コミット完了
10.5： もしコミット中断したいときは→「esc」→「:q!」→コミットしない
11： GitHubアカウントを作成し、リモートリポジトリの新規作成
12： GitにGitHubアカウントのname・emailの設定「git config --local user.name/email <neme/email>」を追加
13：「git remote -v」で紐づいているﾘﾓｰﾄがないか確認
14：「git remote add/set-url origin(ﾘﾓｰﾄ名) <URLFromGitHub>」でﾛｰｶﾙとﾘﾓｰﾄを紐づけ
15：「git push origin 送信元ブランチ名」でﾘﾓｰﾄへpush
15.5： 新規作成ファイルコミットの履歴はﾘﾓｰﾄへ反映されていなかった
--------------------------------------------------------------------------------------------------------
16： 他の人のリポジトリをフォーク(GitHub内で多ページでForkボタン押下)→コピーが自分のアカウント下にでき、自分のﾘﾓｰﾄﾘﾎﾟｼﾞﾄﾘの1つになる
17：「git clone <URLFromGitHub> <保存ﾃﾞｨﾚｸﾄﾘ名：指定なければﾘﾓｰﾄﾘﾎﾟｼﾞﾄﾘ名のﾃﾞｨﾚｸﾄﾘができる>」でｸﾛｰﾝのﾛｰｶﾙﾘﾎﾟｼﾞﾄﾘ作成
18： 元のﾘﾎﾟｼﾞﾄﾘに変更が加わったときにpullできるように「git remote add <remote名/upstreamが多い> <ﾌｫｰｸ元URLFromGitHub>」でoriginのほかにもう1つ紐づける
19：「git branch <branchName>」でブランチの新規作成
20：「git checkout <branchName>」で指定ブランチへ移動
21： ステージング(階層が違うやつはパスの指定が必要)とコミット→push
22： プルリクエストの作成(GitHubｱｶｳﾝﾄに通知が来ているとこ押下)もしくはnewpullﾘｸｴｽﾄから変更ブランチを選び変更に間違いがないか確認
23： 概要、詳細記述し、レビュワーを設定→create
---------------------------------------------------------------------------------------------------------
24： pullする前に「git fetch --dry-run」でマージのシミュレーション
24： ﾌｫｰｸ元に変更が加えられた場合は「git pull upstream <branchName>」
24.5： ﾘﾓｰﾄﾘﾎﾟｼﾞﾄﾘに変更が加えられた場合は「git pull origin <branchName>」
----------------------------------------------------------------------------------------------------------
25：「git rebase --i HEAD~3」で最新ｺﾐｯﾄから3つ分をまとめて表示
26： 表示されたｺﾐｯﾄをまとめたい　→ｲﾝｻｰﾄﾓｰﾄﾞ→2つ目3つ目の「pick」を「squash/fixup」に変更→終了保存→詳細ｺﾒﾝﾄ編集など→終了保存
27： ｺﾐｯﾄを編集したい　→ｲﾝｻ→編集したいｺﾐｯﾄの「pick」を「edit」に変更→編集ｺﾐｯﾄの指定ができた
27.3： 指定したｺﾐｯﾄで編集していたﾌｧｲﾙの変更を行う→「git add ﾌｧｲﾙ名」「git commit --amend」→ｺﾝﾌﾘｸﾄ解消
27.6： 注)ｺﾝﾌﾘｸﾄ解消時、指定したｺﾐｯﾄ以降の変更を破棄するような編集をすると、編集が破棄されたｺﾐｯﾄの履歴も破棄されてしまう
27.9： ｺﾝﾌﾘｸﾄ解消→「git rebase --continue」→ｲﾝｻ→ｺﾒﾝﾄ編集→終了保存→ｲﾝｻ→以降ｺﾐｯﾄのｺﾒﾝﾄ編集→終了保存
----------------------------------------------------------------------------------------------------------
28： ﾌﾞﾗﾝﾁAのｺﾐｯﾄ複数をﾌﾞﾗﾝﾁBにまとめてﾏｰｼﾞする→「git merge --squash ﾌﾞﾗﾝﾁA」→ｺﾝﾌﾘｸﾄ無→完了
28.5： ｺﾝﾌﾘｸﾄ発生→解消→「add」「commit」→完了(解消時、まとめたｺﾐｯﾄ内容や以前のｺﾐｯﾄ内容を反映させない編集をしてもｺﾐｯﾄ歴はそのまま残る)